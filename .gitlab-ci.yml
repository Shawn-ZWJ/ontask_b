before_script:
  - rm -f geckodriver.log
  - python3 -m pip install --upgrade --user pip
  - python3 -m pip install coverage
  - python3 -m pip install --user -r requirements.txt
  - python3 manage.py collectstatic --no-input
  - python3 manage.py migrate

stages:
  - Run tests
  - Build doc

#services:
#  - redis
#  - postgres

#prepare_celery:
#  stage: Run tests
#  allow_failure: true
#  script:
#    - supervisorctl -c supervisor/supervisor.conf shutdown
#    - supervisord -c supervisor/supervisor.conf

test:
  stage: Run tests
  script:
    - coverage run ./manage.py test -v 2 ontask.workflow
    - coverage run -a ./manage.py test -v 2 ontask.dataops
    - coverage run -a ./manage.py test -v 2 ontask.table
    - coverage run -a ./manage.py test -v 2 ontask.action
    - coverage run -a ./manage.py test -v 2 ontask.tests
    - coverage run -a ./manage.py test -v 2 ontask.scheduler
    - coverage run -a ./manage.py test -v 2 ontask.tasks

build_doc:
  stage: Build doc
  script:
    - coverage run -a ./manage.py test -v 2 ontask.tests.create_screen_captures
    - coverage run -a ./manage.py test -v 2 ontask.tests.scenario_01_captures
    - coverage run -a ./manage.py test -v 2 ontask.tests.scenario_02_captures
    - coverage run -a ./manage.py test -v 2 ontask.tests.scenario_03_captures
    - coverage run -a ./manage.py test -v 2 ontask.tests.tutorial_captures
    - coverage run -a ./manage.py test -v 2 ontask.tests.create_api_captures
    - cd ontask/tests/images
    - bash push.sh
    - cd ../../..
    - cd docs_src && make clean html copy_to_docs && cd ..
    - coverage html
    - coverage report
  coverage: '/TOTAL.+ ([0-9]{1,3}%)/'
  artifacts:
    paths:
      - htmlcov
      - .coverage
      - ontask/tests/images
      - docs

#variables:
#  # Configure redis service (https://hub.docker.com/_/redis/)
#  # Here's nothing to configure :)
#  # POSTGRES_DB: custom_db
#  # POSTGRES_USER: custom_user
#  # POSTGRES_PASSWORD: custom_pass
#
#
#connect:
#  # Connect to PostgreSQL database as user postgres, without password
#  image: redis
#  script:
#  - redis-cli -h redis PING
#
# connect:
#  image: postgres
#  script:
#  # official way to provide password to psql: http://www.postgresql.org/docs/9.3/static/libpq-envars.html
#  - export PGPASSWORD=$POSTGRES_PASSWORD
#  - psql -h "postgres" -U "$POSTGRES_USER" -d "$POSTGRES_DB" -c "SELECT 'OK' AS status;"


